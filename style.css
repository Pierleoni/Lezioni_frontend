/* css è lo stile della pagina, se si usa il tag body all' suo interno posso decidere l'aspeto degli elementi della mia pagina web 
le regole immesse nel foglio funzionano a cascata : l'ultima regola immessa è quella che ha la priorità; ma se le regole che non vengono ridefinite ereditano secondo le regole del corpo(della pagina web cioe Html)  */
/* per importare da google o altri siti altre risores esterne (in questo caso dei font) bisogna usare il tag @import e specificare l'URL delle risorse
per utilizzarli dobbiamo richiamrli [in questo caso attraverso il tag html perchè vogliamo specificarlo ad ogni elemento della nostra pagina]
in questo caso l'attributo style diventa Style="color:red;" perchè voglio cambiare il colore del font e non di background 
    in questo caso ho usato un valore rgb(Red,green, blue dove in Hex i 3 canali corrispondono a questi tre valori), digitando su internet color picker e ,con un copy e paste, incollando i 3 valori RGB   tra le parentesi dopo la proprietà rgb.
    in questo caso ho aggiunto il colore al titolo tramite un copy and paste dei 6 valori del color picker sotto la nomencaltura HEX (esadecimale).*/
@import url('https://fonts.googleapis.com/css2?family=Comfortaa:wght@300;400;500;600;700&display=swap');

/* per pre-impostare dei valori che richiamerai spesso invece di rispecificare il valore ogni volta puoi creare delle variabili:after
prima apri una regola  usando il selettore :root che specifica le regole per O G N I elemento del documento,
poi specifichi un nome per la variabile e ne specifichi il valore. Per utilizzarla nelle varei regole si userà var(--nomevariabile).*/
:root {
    --bright: #eff;
    --title: #abc;
    --dark: #012;
    --darkac: #123;
    --grey: rgb(106, 106, 112);
    --green: #0a2;
    --thcolor: #f00;
    --fdlx: linear-gradient(to left, var(--title), rgba(170, 187, 204, 0.5));
    --fdrx: linear-gradient(to right, var(--title), rgba(170, 187, 204, 0.5));
    --fdbg: radial-gradient(farthest-side at 50%, #2c5364, #203a43, #0f2027);
}

/*  */
html {
    font-family: 'Comfortaa', sans-serif;
}

html,
body {
    margin: 0;
    padding: 0;
}

body {
    background-color: var(--dark);
    color: var(--bright);


}

/* per settare una sola regola per piu elementi si elencano con la virgola prima delle parentesi graffe */
h1,
h2,
h3,
h4,
h5,
h6 {
    color: var(--title);
    font-weight: 700;
}

/* pseudoclassi:
alcuni tag sono dotati di pseudo classi, in parole povere, delgi aspetti che possono prendere per stati diversi;
in questo caso stiamo lavorando sulle pseudo classi del tag anchor: 
- link: quando il link non è stato cliccato
- visited: quando il link è stato visitato
- hover quando il mouse passa sopra*/
a:link {
    color: #f80;
}

a:visited {
    color: #bf0;
}

a:hover {
    color: #f0b;
}

mark {
    background-color: #add;
    color: #112;
}

/*l id è l'identificativo di una tag e si usa solo una volta,si richiama con l'ashtag nel foglio css
    la classe invece sono regole di css che si possono applicare a piu elementi,si richiama con il punto.*/
#intro {
    margin: 1rem;
    padding: 1rem;
    border: 5px solid var(--title);
    border-radius: 10px;
    background-image: var(--fdbg)
}

.bordo {
    margin: 1rem;
    padding: 1rem;
    border: 5px dotted var(--title);
    border-radius: 10px;
}

.photo {
    text-align: right;
}

.info {
    text-align: center;
    color: #f00;


}

.curiosità {
    margin: 0.5rem;
    padding: 0.5rem;
    background: var(--fdlx);
    color: var(--dark);
    border-radius: 10px;
}

.curiosità:nth-child(even) {
    background: var(--fdrx);

}

/* Quando voglio fare lo stile di una tabella sul foglio CSS devo dare la classe 
(poiche a differenza dell'id sarà un elemento che richiamero piu volte nel sito) 
al tag table(!!!!!Remember: Don't be Stronzo!!!) sul foglio Html e in seguito richiamare la classe sul foglio CSS la classe (con il punto)
e decidere le prorietà all'interno della tabella trra le parentesi graffe.
le proprietà sono le seguenti:
1) background-color
2)color
3)border-spacing= cell spacing su Html
4)border= stessa cosa su html
5)padding=space padding su html
6)text-align= align su html
7)border-collapse: fa in modo che non si creino doppi bordi, e con la prorietà collapse fara collassare i bordi in un solo bordo della tabella  */
table,
th,
td {
    background-color: var(--title);
    color: var(--dark);
    border: 2px solid black;
    border-collapse: collapse;
    border-radius: 20px;
    text-align: left;

}

table {
    width: 90%;
}

.th {
    color: var(--thcolor);
}

.th,
td {
    padding: 10px;
}

td {
    color: #001;
}

.navbar {
    height: 4rem;
    background: var(--fdbg);
    top: 0;
    position: sticky;
    width: 100%;
}

.card {
    background: var(--fdlx);
    border: dotted var(--title);
    height: 20rem;
    width: 15rem;
    border-radius: 1em;
    margin: 1em;
    display: flex;
    justify-content: center;
    align-items: center;
}

.card h1 {
    color: var(--darkac);
}

/* per selezionare il primo elemento di una classe */
.card:nth-child(1) {
    background: var(--fdrx);
}

/* per selezionare l'ultimo elemento di una classe */
.card:last-child {
    background: var(--fdrx);
}

/* per richiamare tutti gli elemnti pari in un elenco corrispondente a una classe: */
.card:nth-child(even) {
    height: 17rem;
}

/* per selzionare i multpli di 3 ricihamare */
.card:nth-child(3n+0) {
    height: 15rem;
}

/* Per usare le flebox abbiamo bisongo di card o contentitori su documento html a cui daremo un classe e su foglio di stile daremo la prorietà display: flex;. Questa visualizzazione crea due assi invisibili: una delle ascisse (asse x) e delle ordinate (asse Y), quindi i nostri elementi non saranno piu uno sopra l'altro perchè questa proprietà li sta posizionando sull'asse delle ascisse e di default quest'asse è orizzontale. Possiamo cambiare la posizione dell'asse attraverso la proprietà flex-direction:
<ol>
<li>
column: sposta l'asse x in verticale quindi anche il nostro contentuto sara posizionato e visualizzato verticalmente dall'alto verso il basso 
</li>
<li>
row(Default):è l'impostazione di default della proprietà, per cui l'asse x è mantenuta verticalmente cosi come i nostri elementi che vengono mantenuti da sx verso dx.
</li>
<li>
row-reverse: fa il contrario del row ovvero gli elementi vengono visualizzati da dx verso sx sulla linea orizzontale 
</li>
<li>
column-reverse: fa il contrario del column, cioè gli elementi vengono visualizzati dal basso verso l'alto 
</li>
</ol>
Ora dobbiamo alinneare gli elementi lungo l'asse x attraverso la prorietà justify-content:
<ol>
<li>
flex start(default): gli elementi sono imballati verso lungo l'asse x da sx verso dx
</li>
<li>
flex end: gli elementi vengono imballati lungo l'asse x da dx verso sx 
</li>
<li>
center: gli elementi vengono posizionati al centro del contentitore (div) che li contiene 
</li>
<li>
space-between: crea spazio tra gli elementi distributi uniformente in fila; il primo elemento si troverà tutto a sx del contenitore, il secondo al centro e l'ultimo tutto a dx.
</li>
<li>space-around: simile ma allo stesso tempo diverso da space-between. Crea uno spazio, uguale sui entrambi i lati, intorno gli elementi.
Ad esempio le card che sono contenute in un contenitore avranno una spaziatura tra i bordi. </li>
N.B. da notatre che visivamente gli spazi non sono uguali, poichè tutti gli elementi hanno lo spazio uguale su entrambi i lati.
Difatti il primo elemento (quello a sx) ha una certa unità di spazio tra il bordo e se stesso, mentre tra il primo e il secondo elemento si ha un unità di spazio doppia perchè l'elemento successivo ha una propria spaziatura che si applica. 
<li>space-evenly: distribuisce lo spazio in modo uniforme tra tutti gli elementi; cioè gli elementi sono distribuiti in modo che la spaziatura tra due elementi (e lo spazio ai bordi) sia uguale.</li>
</ol>
Ricapitolando il justify content serve per allineare gli elementi sull'asse x, mentre se vogliamo allineare gli oggetti lungo l'asse y useremo la proprietà align-items:
<ol>
<li>
flex-start: alinea gli elementi  all'inizio dell'asse trasversale (y); in alto 
</li>
<li>
flex-end: alinea gli elementi  alla fine dell'asse trasversale (y); in basso 
</li>
<li>
center: alinea gli elementi  al centro dell'asse trasversale 
</li>
<li>
baseline: alinea gli elementi in modo che il testo della linea di ciascun elemento sia allineato 
</li>
<li>stretch(default): allunga gli elementi per riempire il contentitore.</li>
</ol>
Per impostazione di default tutti gli elementi proveranno a stare in una riga e quidni se aumentassi gli elementi nel contenitore vengono visualizzati schiacciati l'uno all'altro (questo ovviamente se non ho applicato nessuna prorietà di flex agli elementi), per ovviare a questo problema si usa il felx-wrap:
<ol>
<li>
nowrap(default): non applica nessun avvolgimento degli elementi 
</li>
<li>
wrap: flette gli elementi in più linee, mandadoli anche a capo qualora non ci sia piu spazio.
</li>
<li>
wrap-reverse: gli elementi vengono disposti in più linee dal basso verso l'alto.
</li>
</ol>
Un altra prorietà e l'align-content: da non confondere con l'align-items perchè quest'ultima funziona S O L O quando abbiamo la prorietà flex-wrap settata su wrap o wrap-reverse, questa prorietà alinea tutti gli elementi sull'asse x o meglio dire che alinea gli elementi singoli tra  l'asse orizzontale (x).
<ol>
<li>normal(default): gli elementi rimangono posizionati nella loro posizione di default 
</li>
<li>flex-start: gli elementi sono impacchettati all'inzio del contentitore 
</li>
<li>flex-end: gli elementi vengono posizionati alla fine del contentitore 
</li>
<li>center: gli elementi vengono messi al centro del contentitore 
</li>
<li> space-between: gli vengono uniformente distributi come nel justify-content</li>
<li>space-evenly: gli elementi sono uniformente distribuiti con equal spazio tra loro.</li>
<li>space-evenly: gli elementi sono uniformente distribuiti con equal spazio intorno a loro </li>
<li>stretch: le linee vengono strecciate pre occuapre lo spazio rimanente</li>
</ol>
Inoltre puoi aggiungere un gap o spazio tra gli elementi tramite la prorietà gap (gap:...;).
N.B. la proprietà gap non è esclusiva per le flexbox, ma funziona anche per la griglia e per i layout multi-colonna. 
Ci sono anche alcune prorietà della flexbox che riguardano i figli di un contentitore, 

*/
.cardcontainer {
    background: var(--fdbg);
    height: 50rem;
    display: flex;
    border: solid 1px var(--bright);
    border-radius: 10px;
    /* flex-direction: column-reverse;
    flex-wrap: wrap; */
    flex-flow: row wrap;
    justify-content: center;
    align-items: baseline;
    align-content: flex-start;
    gap: 2rem;
    row-gap: 5rem;
    column-gap: 20rem;
    gap: 1rem 2rem;
}

/*le prorpietà left,bottom,top, right sposto la posizione dell'elemento html dove voglio nella viewport 
le posizioni di css sono varie possono essere relative al contenuto ed ecc. 
absolute: si sovrapone agli elementi della pagina 
relative: è relativo al contentitore che lo contiene cioè al parente piu vicino perchè in questo caso è relativo al tag che lo contiene
fixed: lo fissa in un punto della viewport,
sticky: lo tiene fermo in un punto finchè non si scrolla e una volta che si inizia a scrollare lo tiene fermo alla viewport.
Flexbox:
ti dispone dinamicamente i contentuti di un elemento
per wrappare le card bisogna dargli una height senno non li wrappera
LA differenza tra align-items e align content è che content si considera tutta l'area della flexbox mentre items è per disporre gli elementi della flexbox
per richiamare tutti gli elementi inclusi in una classe si scrive  
es.(tutti gli elementi h1 della classe .card)
.card h1{...}; */
iframe {
    background-color: var(--bright);
    color: var(--dark);
    width: 50rem;
    height: 20rem;
    border: 1px solid blanchedalmond;
}

.button {
    background-color: #333;
    color: #0a2;
    border: 1px solid black;
    border-radius: 5px;
    height: 2rem;
    width: 6rem;
    justify-content: center;


}